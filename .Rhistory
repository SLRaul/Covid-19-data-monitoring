## extract the data from the repository from the computer
new_cases <- fread("C:/Users/Raull/Documents/Repositorio/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv",
header = T)
library(data.table)
library(lubridate)
library(dplyr)
library(ggplot2)
library(tidyr)
## extract the data from the repository from the computer
new_cases <- fread("C:/Users/Raull/Documents/Repositorio/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv",
header = T)
## extract the data from the repository from the computer
new_cases <- fread("C:/Users/silva/Documents/Repositorio/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv",
header = T)
cases_date <- fread("C:/Users/silva/Documents/Repositorio/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv",
header = F)[1,c(-1,-2,-3,-4)]
## ajusting the data
cases_date <- mdy(cases_date)
## select the countrys
France_all <- as.numeric(new_cases %>% select(-Lat, -Long) %>%  filter(`Country/Region` == "France") %>%
select(-`Province/State`, -`Country/Region`) %>% apply( 2, sum) )
## select the countrys
France_all <- as.numeric(new_cases %>% select(-Lat, -Long) %>%  filter(`Country/Region` == "France") %>%
select(-`Province/State`, -`Country/Region`) %>% apply( 2, sum) )
Brazil <- as.numeric(new_cases %>% filter(`Country/Region` == 'Brazil') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
Italy <- as.numeric(new_cases %>% filter(`Country/Region` == 'Italy') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
Korea <- as.numeric(new_cases %>% filter(`Country/Region` == 'Korea, South') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
Germany <- as.numeric(new_cases %>% filter(`Country/Region` == 'Germany') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
US <- as.numeric(new_cases %>% filter(`Country/Region` == 'US') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
## ajusting the data for plotting
dados <- as.data.frame(cbind(c(France_all, Italy, Brazil, Korea, Germany, US),
(c(as.character(cases_date),
as.character(cases_date),
as.character(cases_date),
as.character(cases_date),
as.character(cases_date),
as.character(cases_date))),
rep(c("France", "Italy", "Brazil", "Korea","Germany", "US"),each= length(Brazil))))
colnames(dados)<- c("Cases", "Date", "Country")
dados$Cases <- c(France_all, Italy, Brazil, Korea, Germany, US)
## the plot
dados %>% ggplot( aes(x=Date, y=Cases, color = Country, group= Country)) + geom_point() +geom_line() +
theme_bw() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
ggtitle("New cases from 01/22/2020")
## ajusting the data for a plot
dados <- dados %>% filter(Cases >0)
tabela <- dados %>% spread(Country, Cases)
br <- na.omit(tabela$Brazil)
fr <- na.omit(tabela$France)
it <- na.omit(tabela$Italy)
ko <- na.omit(tabela$Korea)
ger <- na.omit(tabela$Germany)
us <- na.omit(tabela$US)
dados_ <- as.data.frame(cbind(c(fr, it, br, ko, ger, us),
(c(1:length(fr),1:length(it),1:length(br),1:length(ko),1:length(ger),1:length(us))),
rep(c("France", "Italy", "Brazil", "Korea", "Germany", "US"),
c(length(fr),length(it),length(br),length(ko),length(ger), length(us)))
))
colnames(dados_)<- c("Cases", "Day", "Country")
dados_$Cases <-c(fr,it,br,ko, ger, us)
dados_$Day <- c(1:length(fr),1:length(it),1:length(br),1:length(ko), 1:length(ger), 1:length(us))
dados_ %>% ggplot(aes(x=Day, y=Cases, group= Country, color= Country)) +
geom_point() + geom_line() + theme_bw()+
ggtitle("New cases from the fist confirmed")
death_cases <-  fread("C:/Users/Raull/Documents/Repositorio/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv",
header = T)
death_cases <-  fread("C:/Users/silva/Documents/Repositorio/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv",
header = T)
## select the countrys
France_all <- as.numeric(death_cases %>% select(-Lat, -Long) %>%  filter(`Country/Region` == "France") %>%
select(-`Province/State`, -`Country/Region`) %>% apply( 2, sum) )
Brazil <- as.numeric(death_cases %>% filter(`Country/Region` == 'Brazil') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
Italy <- as.numeric(death_cases %>% filter(`Country/Region` == 'Italy') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
Korea <- as.numeric(death_cases %>% filter(`Country/Region` == 'Korea, South') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
Germany <- as.numeric(death_cases %>% filter(`Country/Region` == 'Germany') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
US <- as.numeric(death_cases %>% filter(`Country/Region` == 'US') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
## ajusting the data for plotting
dados <- as.data.frame(cbind(c(France_all, Italy, Brazil, Korea, Germany, US),
(c(as.character(cases_date),
as.character(cases_date),
as.character(cases_date),
as.character(cases_date),
as.character(cases_date),
as.character(cases_date))),
rep(c("France", "Italy", "Brazil", "Korea","Germany", "US"),each= length(Brazil))))
colnames(dados)<- c("Cases", "Date", "Country")
dados$Cases <- c(France_all, Italy, Brazil, Korea, Germany, US)
## the plot
dados %>% ggplot( aes(x=Date, y=Cases, color = Country, group= Country)) + geom_point() +geom_line() +
theme_bw() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
ggtitle("Dead cases from 01/22/2020")
## ajusting the data for a plot
dados <- dados %>% filter(Cases >0)
tabela <- dados %>% spread(Country, Cases)
br <- na.omit(tabela$Brazil)
fr <- na.omit(tabela$France)
it <- na.omit(tabela$Italy)
ko <- na.omit(tabela$Korea)
ger <- na.omit(tabela$Germany)
us <- na.omit(tabela$US)
dados_ <- as.data.frame(cbind(c(fr, it, br, ko, ger, us),
(c(1:length(fr),1:length(it),1:length(br),1:length(ko),1:length(ger),1:length(us))),
rep(c("France", "Italy", "Brazil", "Korea", "Germany", "US"),
c(length(fr),length(it),length(br),length(ko),length(ger), length(us)))
))
colnames(dados_)<- c("Cases", "Day", "Country")
dados_$Cases <-c(fr,it,br,ko, ger, us)
dados_$Day <- c(1:length(fr),1:length(it),1:length(br),1:length(ko), 1:length(ger), 1:length(us))
dados_ %>% ggplot(aes(x=Day, y=Cases, group= Country, color= Country)) +
geom_point() + geom_line() + theme_bw()+
ggtitle("Dead cases from the fist death")
# extract the data from the repository from the computer
new_cases <- fread("C:/Users/silva/Documents/Repositorio/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv",
header = T)
new_cases_date <- fread("C:/Users/silva/Documents/Repositorio/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv",
header = F)[1,c(-1,-2,-3,-4)]
cases_date <- mdy(new_cases_date)
Brazil <- as.numeric(new_cases %>% filter(`Country/Region` == 'Brazil') %>% select(-`Province/State`, -`Country/Region`,-Lat, -Long))
Brazil <- Brazil[Brazil > 0]
########## previsÃ£o #########
#rm(list = ls())
library (deSolve)
sis_model = function (current_timepoint, state_values, parameters)
{
# create state variables (local variables)
S = state_values [1]        # susceptibles
I = state_values [2]        # infectious
with (
as.list (parameters),     # variable names within parameters can be used
{
# compute derivatives
dS = (-beta * S * I) + (gamma * I)
dI = ( beta * S * I) - (gamma * I)
# combine results
results = c (dS, dI)
list (results)
}
)
}
#parametros
contact_rate = 8                    # number of contacts per day
transmission_probability = 0.07       # transmission probability
infectious_period = 5.55                 # infectious period
#computando os valores de tranmisÃ§Ã£o e de recuperaÃ§Ã£o
r_0 <- 2.39
beta_value = r_0/5.55#contact_rate * transmission_probability
gamma_value = ((r_0/5.55)/r_0)#1 / infectious_period
#numero reprodutivo
Ro = beta_value / gamma_value
#parametros de dinamica da doenÃ§a
parameter_list = c (beta = beta_value, gamma = gamma_value)
#valores iniciais das sub pop
X = 210000000      # susceptible hosts
Y = 1           # infectious hosts
#pop total
N = X + Y
#valores inicial da eq diferenci
initial_values = c (S = X/N, I = Y/N)
#chamando os dias-ponto
timepoints = seq (0, 100, by=1)
#simulando um epidemia sis
output = lsoda (initial_values, timepoints, sis_model, parameter_list)
###### plot
# susceptible hosts over time
plot (I ~ time, data = output, type='l', ylim = c(0,0.1),
#,xlim=c(0,50),
col = 'red', ylab = 'S, I, S', main = 'SIS epidemic')
lines(Brazil/210000000)
cbind(output[1:53,],Brazil/210000000)
cbind(output[1:length(Brazil),],Brazil/210000000)
cbind(output[1:length(Brazil),],Brazil*7/210000000)
